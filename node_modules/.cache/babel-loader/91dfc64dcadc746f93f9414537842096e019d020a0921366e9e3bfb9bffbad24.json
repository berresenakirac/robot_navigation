{"ast":null,"code":"var _jsxFileName = \"/home/nurkan/react-ros-robot/src/components/Connection.jsx\";\n// import { Component } from \"react\";\n// import  {Button } from \"react-bootstrap\";\n\n// class Connection extends Component{\n//     state={};\n//     render(){\n//         return (<h2>Connection</h2>);\n\n//     }\n// }\n// export default Connection;\n\n// ---->ROSLIB Dependences<----\n\n// import { Component } from \"react\";\n\n// class Connection extends Component{\n//     state={};\n//     init_connection(){\n//         var ros=new window.ROSLIB.Ros();\n//     }\n\n//     render(){\n//         return (<h2>Connection</h2>);\n\n//     }\n// }\n// export default Connection;\n\n// ----->Alert Component<-----\n\n// import { Component } from \"react\";\n// import { Alert } from \"react-bootstrap\";\n\n// class Connection extends Component{\n//     state={connected: true};\n//     init_connection(){\n//         var ros=new window.ROSLIB.Ros();\n//     }\n\n//     render(){ \n//         return (\n//             <div>\n//                 <Alert className=\"text-center m-3\"variant={this.state.connected? \"success\":\"danger\"}> \n//                     {this.state.connected? \"Robot Connected\":\"Robot Disconnected\"}</Alert>     \n//             </div>\n//         );\n\n//     }\n// }\n// export default Connection;\n\n// ---->Connection Logic with ROSLib and React State<----\n// import { Component } from \"react\";\n// import Alert from \"react-bootstrap/Alert\";\n// class Connection extends Component{\n//     state={connected: false, ros:null};\n\n//     constructor(){\n//         super();\n//         this.init_connection();\n// }\n\n//     init_connection() {\n//         this.state.ros= new window.ROSLIB.Ros();\n//         console.log(this.state.ros);\n//         this.state.ros.on(\"connection\", ()=>{\n//             console.log(\"conneciton established:\");\n//             this.state.connected=true;\n//             this.setState({connected: true});\n//         });\n\n//         this.state.ros.on(\"close\",()=>{\n//             console.log(\"connection is closed!\");\n//             this.setState({connected: false});\n\n//             //try to reconnect every 3 seconds\n//             setTimeout(()=> { \n//                 try{\n//                     this.state.ros.connect(\"ws://192.168.2.8:9090\");\n//                 }   catch(error){\n//                     console.log(\"connection problem!\");\n//                 }\n//              }, 3000);\n//      });\n\n//          try{\n//             this.state.ros.connect(\"ws://192.168.2.8:9090\");\n//         }   catch(error){\n//             console.log(\"connection problem!\");\n//         }\n//     }\n\n//     render(){\n//         return (\n//             <div>\n//                 <Alert className=\"text-center m-3\"variant={this.state.connected? \"success\":\"danger\"}> \n//                     {this.state.connected? \"Robot Connected\":\"Robot Disconnected\"}</Alert>     \n//             </div>\n//     );\n//     }\n// }\n\n// export default Connection;\n\n// ---->Clean code and use configuration file<----\nimport { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"conneciton established:\");\n      this.state.connected = true;\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({\n        connected: false\n      });\n\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n        } catch (error) {\n          console.log(\"connection problem!\");\n        }\n      }, 3000);\n    });\n    try {\n      this.state.ros.connect(\"ws:\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n    } catch (error) {\n      console.log(\"ws://\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n      console.log(\"connection problem!\");\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center m-3\",\n        variant: this.state.connected ? \"success\" : \"danger\",\n        children: this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Connection;","map":{"version":3,"names":["Component","Alert","Config","jsxDEV","_jsxDEV","Connection","constructor","state","connected","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","ROSBRIGDE_SERVER_IP","ROSBRIGDE_SERVER_PORT","error","render","children","className","variant","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/nurkan/react-ros-robot/src/components/Connection.jsx"],"sourcesContent":["// import { Component } from \"react\";\n// import  {Button } from \"react-bootstrap\";\n\n// class Connection extends Component{\n//     state={};\n//     render(){\n//         return (<h2>Connection</h2>);\n\n//     }\n// }\n// export default Connection;\n\n\n\n// ---->ROSLIB Dependences<----\n\n// import { Component } from \"react\";\n\n// class Connection extends Component{\n//     state={};\n//     init_connection(){\n//         var ros=new window.ROSLIB.Ros();\n//     }\n\n\n//     render(){\n//         return (<h2>Connection</h2>);\n\n//     }\n// }\n// export default Connection;\n\n\n\n// ----->Alert Component<-----\n\n// import { Component } from \"react\";\n// import { Alert } from \"react-bootstrap\";\n\n// class Connection extends Component{\n//     state={connected: true};\n//     init_connection(){\n//         var ros=new window.ROSLIB.Ros();\n//     }\n\n\n//     render(){ \n//         return (\n//             <div>\n//                 <Alert className=\"text-center m-3\"variant={this.state.connected? \"success\":\"danger\"}> \n//                     {this.state.connected? \"Robot Connected\":\"Robot Disconnected\"}</Alert>     \n//             </div>\n//         );\n\n//     }\n// }\n// export default Connection;\n\n\n// ---->Connection Logic with ROSLib and React State<----\n// import { Component } from \"react\";\n// import Alert from \"react-bootstrap/Alert\";\n// class Connection extends Component{\n//     state={connected: false, ros:null};\n\n//     constructor(){\n//         super();\n//         this.init_connection();\n// }\n    \n//     init_connection() {\n//         this.state.ros= new window.ROSLIB.Ros();\n//         console.log(this.state.ros);\n//         this.state.ros.on(\"connection\", ()=>{\n//             console.log(\"conneciton established:\");\n//             this.state.connected=true;\n//             this.setState({connected: true});\n//         });\n\n//         this.state.ros.on(\"close\",()=>{\n//             console.log(\"connection is closed!\");\n//             this.setState({connected: false});\n\n//             //try to reconnect every 3 seconds\n//             setTimeout(()=> { \n//                 try{\n//                     this.state.ros.connect(\"ws://192.168.2.8:9090\");\n//                 }   catch(error){\n//                     console.log(\"connection problem!\");\n//                 }\n//              }, 3000);\n//      });\n\n//          try{\n//             this.state.ros.connect(\"ws://192.168.2.8:9090\");\n//         }   catch(error){\n//             console.log(\"connection problem!\");\n//         }\n//     }\n        \n\n\n//     render(){\n//         return (\n//             <div>\n//                 <Alert className=\"text-center m-3\"variant={this.state.connected? \"success\":\"danger\"}> \n//                     {this.state.connected? \"Robot Connected\":\"Robot Disconnected\"}</Alert>     \n//             </div>\n//     );\n//     }\n// }\n\n// export default Connection;\n\n\n// ---->Clean code and use configuration file<----\nimport { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport  Config  from \"../scripts/config\";\nclass Connection extends Component{\n    state={connected: false, ros:null};\n\n    constructor(){\n        super();\n        this.init_connection();\n}\n    \n    init_connection() {\n        this.state.ros= new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        this.state.ros.on(\"connection\", ()=>{\n            console.log(\"conneciton established:\");\n            this.state.connected=true;\n            this.setState({connected: true});\n        });\n\n        this.state.ros.on(\"close\",()=>{\n            console.log(\"connection is closed!\");\n            this.setState({connected: false});\n\n            //try to reconnect every 3 seconds\n            setTimeout(()=> { \n                try{\n                    this.state.ros.connect(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n                    \":\"+\n                    Config.ROSBRIGDE_SERVER_PORT);\n                }   catch(error){\n                    console.log(\"connection problem!\");\n                }\n             }, 3000);\n     });\n\n         try{\n            this.state.ros.connect(\"ws:\"+Config.ROSBRIGDE_SERVER_IP+\n            \":\"+\n            Config.ROSBRIGDE_SERVER_PORT);\n        }   catch(error){\n            console.log(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n            \":\"+\n            Config.ROSBRIGDE_SERVER_PORT);\n            console.log(\"connection problem!\");\n        }\n    }\n        \n\n\n    render(){\n        return (\n            <div>\n                <Alert className=\"text-center m-3\"variant={this.state.connected? \"success\":\"danger\"}> \n                    {this.state.connected? \"Robot Connected\":\"Robot Disconnected\"}</Alert>     \n            </div>\n    );\n    }\n}\n\nexport default Connection;\n\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAQC,MAAM,MAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,MAAMC,UAAU,SAASL,SAAS;EAG9BM,WAAWA,CAAA,EAAE;IACT,KAAK,CAAC,CAAC;IAAC,KAHZC,KAAK,GAAC;MAACC,SAAS,EAAE,KAAK;MAAEC,GAAG,EAAC;IAAI,CAAC;IAI9B,IAAI,CAACC,eAAe,CAAC,CAAC;EAC9B;EAEIA,eAAeA,CAAA,EAAG;IACd,IAAI,CAACH,KAAK,CAACE,GAAG,GAAE,IAAIE,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC;IACvCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,CAACE,GAAG,CAAC;IAC3B,IAAI,CAACF,KAAK,CAACE,GAAG,CAACO,EAAE,CAAC,YAAY,EAAE,MAAI;MAChCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI,CAACR,KAAK,CAACC,SAAS,GAAC,IAAI;MACzB,IAAI,CAACS,QAAQ,CAAC;QAACT,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACD,KAAK,CAACE,GAAG,CAACO,EAAE,CAAC,OAAO,EAAC,MAAI;MAC1BF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAI,CAACE,QAAQ,CAAC;QAACT,SAAS,EAAE;MAAK,CAAC,CAAC;;MAEjC;MACAU,UAAU,CAAC,MAAK;QACZ,IAAG;UACC,IAAI,CAACX,KAAK,CAACE,GAAG,CAACU,OAAO,CAAC,OAAO,GAACjB,MAAM,CAACkB,mBAAmB,GACzD,GAAG,GACHlB,MAAM,CAACmB,qBAAqB,CAAC;QACjC,CAAC,CAAG,OAAMC,KAAK,EAAC;UACZR,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACtC;MACH,CAAC,EAAE,IAAI,CAAC;IAChB,CAAC,CAAC;IAEE,IAAG;MACA,IAAI,CAACR,KAAK,CAACE,GAAG,CAACU,OAAO,CAAC,KAAK,GAACjB,MAAM,CAACkB,mBAAmB,GACvD,GAAG,GACHlB,MAAM,CAACmB,qBAAqB,CAAC;IACjC,CAAC,CAAG,OAAMC,KAAK,EAAC;MACZR,OAAO,CAACC,GAAG,CAAC,OAAO,GAACb,MAAM,CAACkB,mBAAmB,GAC9C,GAAG,GACHlB,MAAM,CAACmB,qBAAqB,CAAC;MAC7BP,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACtC;EACJ;EAIAQ,MAAMA,CAAA,EAAE;IACJ,oBACInB,OAAA;MAAAoB,QAAA,eACIpB,OAAA,CAACH,KAAK;QAACwB,SAAS,EAAC,iBAAiB;QAAAC,OAAO,EAAE,IAAI,CAACnB,KAAK,CAACC,SAAS,GAAE,SAAS,GAAC,QAAS;QAAAgB,QAAA,EAC/E,IAAI,CAACjB,KAAK,CAACC,SAAS,GAAE,iBAAiB,GAAC;MAAoB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAEd;AACJ;AAEA,eAAezB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}