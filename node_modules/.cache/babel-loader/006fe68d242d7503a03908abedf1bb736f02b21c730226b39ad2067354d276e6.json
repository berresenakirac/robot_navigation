{"ast":null,"code":"// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// class Teleoparation extends Component{\n//     state={}\n//     handleMove(){\n//         console.log(\"handle move\");\n\n//     }\n//     handleStop(){\n//         console.log(\"handle stop\");\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (<div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"#EEEEEE\"\n//                 stickColor=\"#BBBBBB\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;\n\n// --->The structure of the HandleMove<----\n// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// import  Config  from \"../scripts/config\";\n\n// class Teleoparation extends Component{\n//     state={ros: null};\n\n//     constructor(){\n//         super();\n//         this.init_connection();\n\n//         this.handleMove=this.handleMove.bind(this);\n//         this.handleStop=this.handleStop.bind(this);\n\n//     }\n\n// init_connection() {\n//     this.state.ros= new window.ROSLIB.Ros();\n//     // this.setState(prevState => ({\n//     //     ros:new window.ROSLIB.Ros()\n//     // }));\n//     console.log(this.state.ros);\n\n//     this.state.ros.on(\"connection\", ()=>{\n//         console.log(\"conneciton established in Teleoperation Component!\");\n//         console.log(this.state.ros);\n//         // this.state.connected=true;\n//         this.setState({connected: true});\n//     });\n\n//     this.state.ros.on(\"close\",()=>{\n//         console.log(\"connection is closed!\");\n//         this.setState({connected: false});\n\n//         //try to reconnect every 3 seconds\n//         setTimeout(()=> { \n//             try{\n//                 this.state.ros.connect(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n//                 \":\"+\n//                 Config.ROSBRIGDE_SERVER_PORT);\n//             }   catch(error){\n//                 console.log(\"connection problem!\");\n//             }\n//          }, Config.RECONNECTION_TIMER);\n//  });\n\n//      try{\n//         this.state.ros.connect(\"ws:\"+Config.ROSBRIGDE_SERVER_IP+\n//         \":\"+\n//         Config.ROSBRIGDE_SERVER_PORT);\n//     }   catch(error){\n//         console.log(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n//         \":\"+\n//         Config.ROSBRIGDE_SERVER_PORT);\n//         console.log(\"connection problem!\");\n//     }\n// }\n//     handleMove(event){\n//         console.log(\"handle move\");\n//         //we need to create a ros publisher on the topic cmd_vel\n//         var cmd_vel=new window.ROSLIB.Topic({\n//             ros: this.state.ros,\n//             name: Config.CMD_VEL_TOPIC,\n//             messageType: \"geometry_msgs/Twist\",\n//         });\n//         //we need to create a twist message to be published to rosbridge\n//         var twist= new window.ROSLIB.Message({\n//             linear:{\n//                 // velocity settings with \"event\"\n//                 x:event.y/100,\n//                 y:0,\n//                 z:0,\n//             },\n//             angular:{\n//                 x:0,\n//                 y:0,\n//                 z:~event.x/100,\n//             },\n//         });\n//         //we need to publish the message on the cmd_vel topic\n//         cmd_vel.publish(twist);\n//     }\n\n//     handleStop(event){\n//         console.log(\"handle stop\");\n//         //we need to create a ros publisher on the topic cmd_vel\n//         var cmd_vel=new window.ROSLIB.Topic({\n//             ros: this.state.ros,\n//             name: Config.CMD_VEL_TOPIC,\n//             messageType: \"geometry_msgs/Twist\",\n//         });\n//         //we need to create a twist message to be published to rosbridge\n//         var twist= new window.ROSLIB.Message({\n//             linear:{\n//                 // velocity settings with \"event\"\n//                 x: event.y/100,\n//                 y:0,\n//                 z:0,\n//             },\n//             angular:{\n//                 x:0,\n//                 y:0,\n//                 z:0,\n//             },\n//         });\n//         //we need to publish the message on the cmd_vel topic\n//         cmd_vel.publish(twist);\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (\n//         <div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"red\"\n//                 stickColor=\"blue\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;","map":{"version":3,"names":[],"sources":["/home/nurkan/react-ros-robot/src/components/Teleoperation.jsx"],"sourcesContent":["// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// class Teleoparation extends Component{\n//     state={}\n//     handleMove(){\n//         console.log(\"handle move\");\n\n//     }\n//     handleStop(){\n//         console.log(\"handle stop\");\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (<div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"#EEEEEE\"\n//                 stickColor=\"#BBBBBB\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;\n\n\n\n// --->The structure of the HandleMove<----\n// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// import  Config  from \"../scripts/config\";\n\n// class Teleoparation extends Component{\n//     state={ros: null};\n\n//     constructor(){\n//         super();\n//         this.init_connection();\n\n//         this.handleMove=this.handleMove.bind(this);\n//         this.handleStop=this.handleStop.bind(this);\n\n//     }\n\n// init_connection() {\n//     this.state.ros= new window.ROSLIB.Ros();\n//     // this.setState(prevState => ({\n//     //     ros:new window.ROSLIB.Ros()\n//     // }));\n//     console.log(this.state.ros);\n\n//     this.state.ros.on(\"connection\", ()=>{\n//         console.log(\"conneciton established in Teleoperation Component!\");\n//         console.log(this.state.ros);\n//         // this.state.connected=true;\n//         this.setState({connected: true});\n//     });\n\n//     this.state.ros.on(\"close\",()=>{\n//         console.log(\"connection is closed!\");\n//         this.setState({connected: false});\n\n//         //try to reconnect every 3 seconds\n//         setTimeout(()=> { \n//             try{\n//                 this.state.ros.connect(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n//                 \":\"+\n//                 Config.ROSBRIGDE_SERVER_PORT);\n//             }   catch(error){\n//                 console.log(\"connection problem!\");\n//             }\n//          }, Config.RECONNECTION_TIMER);\n//  });\n\n//      try{\n//         this.state.ros.connect(\"ws:\"+Config.ROSBRIGDE_SERVER_IP+\n//         \":\"+\n//         Config.ROSBRIGDE_SERVER_PORT);\n//     }   catch(error){\n//         console.log(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n//         \":\"+\n//         Config.ROSBRIGDE_SERVER_PORT);\n//         console.log(\"connection problem!\");\n//     }\n// }\n//     handleMove(event){\n//         console.log(\"handle move\");\n//         //we need to create a ros publisher on the topic cmd_vel\n//         var cmd_vel=new window.ROSLIB.Topic({\n//             ros: this.state.ros,\n//             name: Config.CMD_VEL_TOPIC,\n//             messageType: \"geometry_msgs/Twist\",\n//         });\n//         //we need to create a twist message to be published to rosbridge\n//         var twist= new window.ROSLIB.Message({\n//             linear:{\n//                 // velocity settings with \"event\"\n//                 x:event.y/100,\n//                 y:0,\n//                 z:0,\n//             },\n//             angular:{\n//                 x:0,\n//                 y:0,\n//                 z:~event.x/100,\n//             },\n//         });\n//         //we need to publish the message on the cmd_vel topic\n//         cmd_vel.publish(twist);\n//     }\n\n//     handleStop(event){\n//         console.log(\"handle stop\");\n//         //we need to create a ros publisher on the topic cmd_vel\n//         var cmd_vel=new window.ROSLIB.Topic({\n//             ros: this.state.ros,\n//             name: Config.CMD_VEL_TOPIC,\n//             messageType: \"geometry_msgs/Twist\",\n//         });\n//         //we need to create a twist message to be published to rosbridge\n//         var twist= new window.ROSLIB.Message({\n//             linear:{\n//                 // velocity settings with \"event\"\n//                 x: event.y/100,\n//                 y:0,\n//                 z:0,\n//             },\n//             angular:{\n//                 x:0,\n//                 y:0,\n//                 z:0,\n//             },\n//         });\n//         //we need to publish the message on the cmd_vel topic\n//         cmd_vel.publish(twist);\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (\n//         <div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"red\"\n//                 stickColor=\"blue\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}