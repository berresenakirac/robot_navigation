{"ast":null,"code":"var _jsxFileName = \"/home/nurkan/react-ros-robot/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    // this.setState(prevState => ({\n    //     ros:new window.ROSLIB.Ros()\n    // }));\n    console.log(this.state.ros);\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\",\n        children: \"Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","Config","jsxDEV","_jsxDEV","Map","constructor","state","ros","view_map","bind","init_connection","window","ROSLIB","Ros","console","log","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","componentDidMount","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/nurkan/react-ros-robot/src/components/Map.jsx"],"sourcesContent":["import React,{Component} from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n    state={\n        ros:null,\n    };\n    constructor(){\n        super();\n        this.view_map=this.view_map.bind(this);\n    };\n    init_connection() {\n    \n    \n        this.state.ros= new window.ROSLIB.Ros();\n        // this.setState(prevState => ({\n        //     ros:new window.ROSLIB.Ros()\n        // }));\n        console.log(this.state.ros);\n        //this.setState({ ros: new ROSLIB.Ros() });\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(\"Map:\" + this.state.ros);\n        try {\n        this.state.ros.connect(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" +\n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n        );\n        } catch (error) {\n        console.log(\n            \"ws://\" +\n            Config.ROSBRIDGE_SERVER_IP +\n            \":\" +\n            Config.ROSBRIDGE_SERVER_PORT +\n            \"\"\n        );\n        console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n\n     componentDidMount() {\n        this.init_connection();\n        this.view_map();\n\n    }\n    view_map() {\n        var viewer = new window.ROS2D.Viewer({\n          divID: \"nav_div\",\n          width: 640,\n          height: 480,\n        });\n        var navClient = new window.NAV2D.OccupancyGridClientNav({\n          ros: this.state.ros,\n          rootObject: viewer.scene,\n          viewer: viewer,\n          serverName: \"/move_base\",\n          withOrientation: true,\n        });\n      }\n    \n      render() {\n        return (\n          <div>\n            <div id=\"nav_div\">Viewer</div>\n          </div>\n        );\n      }\n    }\n\n\nexport default Map;"],"mappings":";AAAA,OAAOA,KAAK,IAAEC,SAAS,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAIxBK,WAAWA,CAAA,EAAE;IACT,KAAK,CAAC,CAAC;IAAC,KAJZC,KAAK,GAAC;MACFC,GAAG,EAAC;IACR,CAAC;IAGG,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;EACAC,eAAeA,CAAA,EAAG;IAGd,IAAI,CAACJ,KAAK,CAACC,GAAG,GAAE,IAAII,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC;IACvC;IACA;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,KAAK,CAACC,GAAG,CAAC;IAC3B;IACA,IAAI,CAACD,KAAK,CAACC,GAAG,GAAG,IAAII,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,MAAM,GAAG,IAAI,CAACT,KAAK,CAACC,GAAG,CAAC;IACpC,IAAI;MACJ,IAAI,CAACD,KAAK,CAACC,GAAG,CAACS,OAAO,CAClB,OAAO,GACPf,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EACJ,CAAC;IACD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAChBL,OAAO,CAACC,GAAG,CACP,OAAO,GACPd,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EACJ,CAAC;MACDJ,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;IACvE;EACJ;EAGCK,iBAAiBA,CAAA,EAAG;IACjB,IAAI,CAACV,eAAe,CAAC,CAAC;IACtB,IAAI,CAACF,QAAQ,CAAC,CAAC;EAEnB;EACAA,QAAQA,CAAA,EAAG;IACP,IAAIa,MAAM,GAAG,IAAIV,MAAM,CAACW,KAAK,CAACC,MAAM,CAAC;MACnCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAIC,SAAS,GAAG,IAAIhB,MAAM,CAACiB,KAAK,CAACC,sBAAsB,CAAC;MACtDtB,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnBuB,UAAU,EAAET,MAAM,CAACU,KAAK;MACxBV,MAAM,EAAEA,MAAM;MACdW,UAAU,EAAE,YAAY;MACxBC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACE/B,OAAA;MAAAgC,QAAA,eACEhC,OAAA;QAAKiC,EAAE,EAAC,SAAS;QAAAD,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EAEV;AACF;AAGJ,eAAepC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}