{"ast":null,"code":"var _jsxFileName = \"/home/nurkan/react-ros-robot/src/components/Teleoperation.jsx\";\n// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// class Teleoparation extends Component{\n//     state={}\n//     handleMove(){\n//         console.log(\"handle move\");\n\n//     }\n//     handleStop(){\n//         console.log(\"handle stop\");\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (<div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"#EEEEEE\"\n//                 stickColor=\"#BBBBBB\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;\n\n// --->The structure of the HandleMove<----\nimport React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Teleoparation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"conneciton established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      // this.state.connected=true;\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({\n        connected: false\n      });\n\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n        } catch (error) {\n          console.log(\"connection problem!\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws:\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n    } catch (error) {\n      console.log(\"ws://\" + Config.ROSBRIGDE_SERVER_IP + \":\" + Config.ROSBRIGDE_SERVER_PORT);\n      console.log(\"connection problem!\");\n    }\n  }\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ros publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n    //we need to create a twist message to be published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        // velocity settings with \"event\"\n        x: event.y / 100,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: ~event.x / 100\n      }\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ros publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    });\n    //we need to create a twist message to be published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        // velocity settings with \"event\"\n        x: event.y / 100,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  render() {\n    // return (<h3>Teleoparation</h3>);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Joystick, {\n        children: [\"size=\", 100, \"sticky=\", true, \"baseColor=\\\"#EEEEEE\\\" stickColor=\\\"#BBBBBB\\\" move=\", this.handleMove, \"stop=\", this.handleStop]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }, this);\n  }\n}\nexport default Teleoparation;","map":{"version":3,"names":["React","Component","Joystick","Config","jsxDEV","_jsxDEV","Teleoparation","constructor","state","ros","init_connection","handleMove","bind","handleStop","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIGDE_SERVER_IP","ROSBRIGDE_SERVER_PORT","error","RECONNECTION_TIMER","event","cmd_vel","Topic","name","CMD_VEL_TOPIC","messageType","twist","Message","linear","x","y","z","angular","publish","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/nurkan/react-ros-robot/src/components/Teleoperation.jsx"],"sourcesContent":["// import React ,{Component} from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// class Teleoparation extends Component{\n//     state={}\n//     handleMove(){\n//         console.log(\"handle move\");\n\n//     }\n//     handleStop(){\n//         console.log(\"handle stop\");\n\n//     }\n\n//     render(){\n//         // return (<h3>Teleoparation</h3>);\n//         return (<div>\n//             <Joystick>\n//                 size={100}\n//                 sticky={true} \n//                 baseColor=\"#EEEEEE\"\n//                 stickColor=\"#BBBBBB\"\n//                 move={this.handleMove} \n//                 stop={this.handleStop}\n//             </Joystick>\n//         </div>);\n\n//     }\n// }\n// export default Teleoparation;\n\n\n\n// --->The structure of the HandleMove<----\nimport React ,{Component} from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport  Config  from \"../scripts/config\";\n\nclass Teleoparation extends Component{\n    state={ros: null};\n\n    constructor(){\n        super();\n        this.init_connection();\n\n        this.handleMove=this.handleMove.bind(this);\n        this.handleStop=this.handleStop.bind(this);\n\n    }\n\ninit_connection() {\n    this.state.ros= new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", ()=>{\n        console.log(\"conneciton established in Teleoperation Component!\");\n        console.log(this.state.ros);\n        // this.state.connected=true;\n        this.setState({connected: true});\n    });\n\n    this.state.ros.on(\"close\",()=>{\n        console.log(\"connection is closed!\");\n        this.setState({connected: false});\n\n        //try to reconnect every 3 seconds\n        setTimeout(()=> { \n            try{\n                this.state.ros.connect(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n                \":\"+\n                Config.ROSBRIGDE_SERVER_PORT);\n            }   catch(error){\n                console.log(\"connection problem!\");\n            }\n         }, Config.RECONNECTION_TIMER);\n });\n\n     try{\n        this.state.ros.connect(\"ws:\"+Config.ROSBRIGDE_SERVER_IP+\n        \":\"+\n        Config.ROSBRIGDE_SERVER_PORT);\n    }   catch(error){\n        console.log(\"ws://\"+Config.ROSBRIGDE_SERVER_IP+\n        \":\"+\n        Config.ROSBRIGDE_SERVER_PORT);\n        console.log(\"connection problem!\");\n    }\n}\n    handleMove(event){\n        console.log(\"handle move\");\n        //we need to create a ros publisher on the topic cmd_vel\n        var cmd_vel=new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n        //we need to create a twist message to be published to rosbridge\n        var twist= new window.ROSLIB.Message({\n            linear:{\n                // velocity settings with \"event\"\n                x:event.y/100,\n                y:0,\n                z:0,\n            },\n            angular:{\n                x:0,\n                y:0,\n                z:~event.x/100,\n            }\n        });\n        //we need to publish the message on the cmd_vel topic\n        cmd_vel.publish(twist);\n    }\n\n    handleStop(event){\n        console.log(\"handle stop\");\n        //we need to create a ros publisher on the topic cmd_vel\n        var cmd_vel=new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n        //we need to create a twist message to be published to rosbridge\n        var twist= new window.ROSLIB.Message({\n            linear:{\n                // velocity settings with \"event\"\n                x:event.y/100,\n                y:0,\n                z:0,\n            },\n            angular:{\n                x:0,\n                y:0,\n                z:0,\n            }\n        });\n        //we need to publish the message on the cmd_vel topic\n        cmd_vel.publish(twist);\n\n    }\n\n    render(){\n        // return (<h3>Teleoparation</h3>);\n        return (<div>\n            <Joystick>\n                size={100}\n                sticky={true} \n                baseColor=\"#EEEEEE\"\n                stickColor=\"#BBBBBB\"\n                move={this.handleMove} \n                stop={this.handleStop}\n            </Joystick>\n        </div>);\n\n    }\n}\nexport default Teleoparation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}